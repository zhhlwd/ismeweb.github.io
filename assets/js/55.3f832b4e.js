(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{329:function(a,t,s){"use strict";s.r(t);var r=s(17),n=Object(r.a)({},function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"词法结构的概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#词法结构的概念","aria-hidden":"true"}},[a._v("#")]),a._v(" 词法结构的概念")]),a._v(" "),s("p",[a._v("  编程语言的词法结构是一套基础性规则，用来描述如何使用这门语言来编写程序。"),s("br"),a._v("\n  作为语法的基础，它规定了诸如变量名是什么样的、怎么写注释，以及程序语句之间如何分隔等规则。")]),a._v(" "),s("h2",{attrs:{id:"字符集"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符集","aria-hidden":"true"}},[a._v("#")]),a._v(" 字符集")]),a._v(" "),s("h3",{attrs:{id:"范围（掌握）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#范围（掌握）","aria-hidden":"true"}},[a._v("#")]),a._v(" 范围（掌握）")]),a._v(" "),s("p",[a._v("  JavaScript 程序是用 Unicode 字符集编写的。Unicode 是 ASCII 和 Latin-1 的超集，并支持地球上几乎所有在用的语言。ECMAScript 3 要求 JavaScript 的实现必须支持 Unicode2.1 及后续版本，ECMAScript5 则要求支持 Unicode3 及后续版本。")]),a._v(" "),s("h4",{attrs:{id:"联想延伸"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#联想延伸","aria-hidden":"true"}},[a._v("#")]),a._v(" 联想延伸")]),a._v(" "),s("p",[a._v("  静态 "),s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode",target:"_blank",rel:"noopener noreferrer"}},[a._v("String.fromCharCode()"),s("OutboundLink")],1),a._v(" 方法返回使用指定的 Unicode 值序列创建的字符串。经常在浏览器的按键事件使用，可以把索引值（按键码）转化成该键对应的的字符。"),s("br"),a._v('\n例：下例返回字符串 "ABC"')]),a._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[a._v("String"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("fromCharCode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("65")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("66")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("67")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("  注意：该方法返回一个字符串，而不是一个 String 对象。"),s("br"),a._v("\n  由于 fromCharCode 是 String 的静态方法，所以应该像这样使用：String.fromCharCode()，而不是作为你创建的 String 对象的方法。"),s("br"),a._v("\n  由于高位编码字符是用两个低位编码（lower value）表示形成的一个字符，因此"),s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint",target:"_blank",rel:"noopener noreferrer"}},[a._v("String.fromCodePoint()"),s("OutboundLink")],1),a._v(" （ES6 规范的一部分）被用来返回这样一对低位编码，从而可以完全表示这些高位编码字符。")]),a._v(" "),s("h3",{attrs:{id:"区分大小写（掌握）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#区分大小写（掌握）","aria-hidden":"true"}},[a._v("#")]),a._v(" 区分大小写（掌握）")]),a._v(" "),s("p",[a._v("  JavaScript 是区分大小写的语言。也就是说，关键字、变量、函数名和所有的标识符都必须采取一致的大小写形式，如果有一个字母大小写不相同就不是同一个，程序会抛出异常。")]),a._v(" "),s("h4",{attrs:{id:"需要注意"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#需要注意","aria-hidden":"true"}},[a._v("#")]),a._v(" 需要注意")]),a._v(" "),s("p",[a._v("  HTML 并不区分大小写（尽管 XHTML 区分大小写）。由于它和客户端 JavaScript 联系紧密，因此这点区别很容易混淆。"),s("br"),a._v("\n  许多客户端 JavaScript 对象和属性与它们所表示的 HTML 标签和属性同名。在 HTML 中，这些标签和属性名可以使用大写也可以是小写，而在 JavaScript 中则必须是小写。例如，在 HTML 中设置事件处理程序时，onclick 属性可以写成 onClick，但在 JavaScript 代码（或者 XHTML 文档）中，必须使用小写的 onclick。")]),a._v(" "),s("h3",{attrs:{id:"空格、换行符（掌握）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#空格、换行符（掌握）","aria-hidden":"true"}},[a._v("#")]),a._v(" 空格、换行符（掌握）")]),a._v(" "),s("p",[a._v("  JavaScript 会忽略程序中标识之间的空格。多数情况下，JavaScript 同样会忽略换行符。但是有少数情况不会忽略，在下文会讲到。")]),a._v(" "),s("h3",{attrs:{id:"unicode-转义序列（了解）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#unicode-转义序列（了解）","aria-hidden":"true"}},[a._v("#")]),a._v(" Unicode 转义序列（了解）")]),a._v(" "),s("p",[a._v("  在有些老旧的计算机硬件和软件里，无法显示或输入 Unicode 字符全集。JavaScript 定义了一种特殊序列，使用 6 个 ASCII 字符来代表任意 16 位 Unicode 内码。这些 Unicode 转义序列均以\\u 为前缀，其后跟随 4 个十六进制数（使用数字以及大写或小写的字母 A~F 表示）。"),s("br"),a._v("\n  这种 Unicode 转义写法可以用在 JavaScript 字符串直接量、正则表达式直接量和标识符中（关键字除外）。例如，如下两个 JavaScript 字符串是完全一样的：")]),a._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"cafe"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"caf\\uooe9"')]),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//.=> true")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("h3",{attrs:{id:"标准化（了解）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标准化（了解）","aria-hidden":"true"}},[a._v("#")]),a._v(" 标准化（了解）")]),a._v(" "),s("p",[a._v("  Unicode 允许使用多种方法对同一个字符进行编码。比如，字符“é”可以使用 Unicode 字符\\uooE9 表示，也可以使用普通的 ASCII 字符 e 跟随一个语调符\\u0301。在文本编辑器中，这两种编码的显示结果一模一样，但它们的二进制编码表示是不一样的，在计算机里也不相等。Unicode 标准为所有字符定义了一个首选的编码格式，并给出了一个标准化的处理方式将文本转换为一种适合比较的标准格式，JavaScript 会认为它正在解析的程序代码已经是这种标准格式，不会再对其标识符、字符串或正则表达式作标准化处理。")]),a._v(" "),s("h2",{attrs:{id:"注释（掌握）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注释（掌握）","aria-hidden":"true"}},[a._v("#")]),a._v(" 注释（掌握）")]),a._v(" "),s("p",[a._v("  JavaScript 支持两种格式的注释。"),s("br"),a._v("\n  在行尾“/”之后的文本都会被 JavaScript 当做注释忽略掉的。。")]),a._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//这里是单行注释")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/*这里是一段注释*/")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//这里是另一段注释")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/*\n *这又是一段注释\n *这里的注释可以连写多行\n *但不能有嵌套的注释\n */")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br")])]),s("h2",{attrs:{id:"直接量（了解）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#直接量（了解）","aria-hidden":"true"}},[a._v("#")]),a._v(" 直接量（了解）")]),a._v(" "),s("p",[a._v("  所谓直接量，就是程序中直接使用的数据值。下面列出的都是直接量：")]),a._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[a._v("12")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//数字")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1.2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//小数")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'hello world'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//字符串文本")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'Hi'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//另一个字符串")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//布尔值")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//另一个布尔值")]),a._v("\n  javascript "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("\n  gi"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//正则表达式直接量（用做模式匹配）")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//空")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br")])]),s("p",[a._v("  具体类型讲解在后面章节。")]),a._v(" "),s("h2",{attrs:{id:"标识符和保留字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标识符和保留字","aria-hidden":"true"}},[a._v("#")]),a._v(" 标识符和保留字")]),a._v(" "),s("h3",{attrs:{id:"标识符（掌握）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标识符（掌握）","aria-hidden":"true"}},[a._v("#")]),a._v(" 标识符（掌握）")]),a._v(" "),s("p",[a._v("  标识符就是一个名字。在 JavaScript 中，标识符用来对变量和函数进行命名，或者用做 JavaScript 代码中某些循环语句中的跳转位置的标记."),s("br"),a._v("\n  JavaScript 标识符必须以字母、下划线（）或美元符（$）开始。后续的字符可以是字母、数字、下划线或美元符（数字是不允许作为首字符出现的，以便 JavaScript 可以轻易区分开标识符和数字）。")]),a._v(" "),s("h4",{attrs:{id:"特殊字符（了解）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特殊字符（了解）","aria-hidden":"true"}},[a._v("#")]),a._v(" 特殊字符（了解）")]),a._v(" "),s("p",[a._v("  出于可移植性和易于书写的考虑，通常我们只使用 ASCII 字母和数字来书写标识符。然而需要注意的是，JavaScript 允许标识符中出现 Unicode 字符全集中的字母和数字。（从技术上讲，ECMAScript 标准也允许在标识符的首字符后面出现 Unicode 字符集中的 Mn 类、Mc 类和 Pc 类坪注 7）。由此，程序员也可以使用非英语语言或数学符号来书写标识符。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("var sí=true；\nvar π=3.14；\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("h3",{attrs:{id:"保留字（了解）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#保留字（了解）","aria-hidden":"true"}},[a._v("#")]),a._v(" 保留字（了解）")]),a._v(" "),s("p",[a._v("  JavaScript 把一些标识符拿出来用做自己的关键字。因此，就不能再在程序中把这些关键字用做标识符了。值得注意的是，这些保留字中的一部分在 ES6 中已经使用了。此外，还有一些关键字在普通的 JS 代码中是合法的，但是在严格模式下是保留字。另外，JS 中内置了很多全局变量和函数，应当避免把他们的名字用作变量名和函数名。此处不做详细列出，自行搜索。")]),a._v(" "),s("h2",{attrs:{id:"可选的分号（掌握）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可选的分号（掌握）","aria-hidden":"true"}},[a._v("#")]),a._v(" 可选的分号（掌握）")]),a._v(" "),s("p",[a._v("  我见过很多初学者没有注意到这个问题，不知道 JavaScript 的分号大多情况是可以不写的，然后每次程序出错时，为了找出哪里没有分号，都看成“斗鸡眼”了，还浪费了时间。"),s("br"),a._v("\n  需要注意的是，JavaScript 并不是在所有换行处都填补分号：只有在缺少了分号就无法正确解析代码的时候，JavaScript 才会填补分号。换句话讲（类似下面代码中的两处异常），如果当前语句和随后的非空格字符不能当成一个整体来解析的话，JavaScript 就在当前语句行结束处填补分号。"),s("br"),a._v("\n  这里有个知乎讨论，"),s("a",{attrs:{href:"https://www.zhihu.com/question/20298345",target:"_blank",rel:"noopener noreferrer"}},[a._v("JavaScript 语句后应该加分号么？"),s("OutboundLink")],1),a._v("，这个"),s("a",{attrs:{href:"https://github.com/yyx990803/semi",target:"_blank",rel:"noopener noreferrer"}},[a._v("semi"),s("OutboundLink")],1),a._v(" 是一个自动加分号的工具，其中还介绍了 Eslint 如何自动加分号。不过我劝你还是加分号，能够减少很多不必要的麻烦，多活几年。。。")]),a._v(" "),s("h3",{attrs:{id:"不能省略分号的情况（掌握）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不能省略分号的情况（掌握）","aria-hidden":"true"}},[a._v("#")]),a._v(" 不能省略分号的情况（掌握）")]),a._v(" "),s("p",[a._v("  声明变量时特别注意！")]),a._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[a._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nb "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" y "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("p",[a._v("  通常来讲，如果一条语句以“（”、“[”、“/”、“+”或“-”开始，那么它极有可能和前一条语句合在一起解析。以“/”、“+”和“一”开始的语句并不常见，而以\n“（”和“[”开始的语句则非常常见，至少在一些 JavaScript 编码风格中是很普遍的。有些程序员喜欢保守地在语句前加上一个分号，这样哪怕之前的语句被修改了、分号被误删除了，当前语句还是会正确地解析：")]),a._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" x"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//这里省略了分号")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("x，x"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("，"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("X")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("forEach")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("og"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//前面的分号保证了正确地语句解析")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("p",[a._v("  return、break 和 continue 语句后面换行会自动插入分号，可以在结尾加{} 或()，代码写在其中这样会避免 return 设计错误。"),s("br"),a._v("\n  涉及“+ +”和“--”运算符的时候，如果将其用做后缀表达式，它和表达式应当在同一行。否则，行尾将填补分号，同时“++”或“--”将会作为下一行代码的前缀操作符并与之一起解析。")]),a._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[a._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),a._v("y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("p",[a._v("  这段代码将解析为“x；+ +y”，而不是“x++；y”。")])])},[],!1,null,null,null);t.default=n.exports}}]);