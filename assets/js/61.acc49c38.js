(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{349:function(s,t,a){"use strict";a.r(t);var n=a(17),r=Object(n.a)({},function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"函数定义（掌握）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数定义（掌握）","aria-hidden":"true"}},[s._v("#")]),s._v(" 函数定义（掌握）")]),s._v(" "),a("p",[s._v("  函数使用 function 关键字来定义，它可以用在函数定义表达式或者函数声明语句里。在两种形式中，函数定义都从 function 关键字开始，其后跟随这些组成部分：")]),s._v(" "),a("ul",[a("li",[s._v("函数名称标识符。函数名称是函数声明语句必需的部分。它的用途就像变量的名字，新定义的函数对象会赋值给这个变量。对函数定义表达式来说，这个名字是可选的：如果存在，该名字只存在于函数体中，并指代该函数对象本身。")]),s._v(" "),a("li",[s._v("一对圆括号，其中包含由 0 个或者多个用逗号隔开的标识符组成的列表。这些标识符是函数的参数名称，它们就像函数体中的局部变量一样。")]),s._v(" "),a("li",[s._v("一对花括号，其中包含 0 条或多条 JavaScript 语句。这些语句构成了函数体：一旦调用函数，就会执行这些语句。")])]),s._v(" "),a("p",[s._v("  函数声明语句“被提前”到外部脚本或外部函数作用域的顶部，所以以这种方式声明的函数，可以被在它定义之前出现的代码所调用。"),a("br"),s._v("\n  不过，以表达式定义的函数就另当别论了，为了调用一个函数，必须要能引用它，而要使用一个以表达式方式定义的函数之前，必须把它赋值给一个变量。变量的声明提前了，但给变量赋值是不会提前的，所以，以表达式方式定义的函数在定义之前无法调用。")]),s._v(" "),a("h2",{attrs:{id:"函数调用（掌握）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数调用（掌握）","aria-hidden":"true"}},[s._v("#")]),s._v(" 函数调用（掌握）")]),s._v(" "),a("p",[s._v("  构成函数主体的 JavaScript 代码在定义之时并不会执行，只有调用该函数时，它们才会执行。有 4 种方式来调用 JavaScript 函数：")]),s._v(" "),a("ul",[a("li",[s._v("作为函数")]),s._v(" "),a("li",[s._v("作为方法")]),s._v(" "),a("li",[s._v("作为构造函数")]),s._v(" "),a("li",[s._v("通过它们的 cal1（）和 apply（）方法间接调用")])]),s._v(" "),a("h3",{attrs:{id:"函数调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数调用","aria-hidden":"true"}},[s._v("#")]),s._v(" 函数调用")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printprops")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" total "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("distance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("o"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("distance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" probability "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("factorial")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("factorial")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("  对于普通的函数调用，函数的返回值成为调用表达式的值。如果该函数返回是因为解释器到达结尾，返回值就是 undefined。如果函数返回是因为解释器执行到一条 return 语句，返回值就是 return 之后的表达式的值，如果 return 语句没有值，则返回 undefined。"),a("br"),s._v("\n  根据 ECMAScript3 和非严格的 ECMAScript5 对函数调用的规定，调用上下文（this 的值）是全局对象。然而，在严格模式下，调用上下文则是 undefined。"),a("br"),s._v("\n  以函数形式调用的函数通常不使用 this 关键字。不过，“this”可以用来判断当前是否是严格模式。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("定义并调用一个函数来确定当前脚本运行时是否为严格模式\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" strict"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("（"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v("（）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),s._v("；"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("（））；\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"方法调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法调用","aria-hidden":"true"}},[s._v("#")]),s._v(" 方法调用")]),s._v(" "),a("p",[s._v("  对方法调用的参数和返回值的处理，和上面所描述的普通函数调用完全一致。但是，方法调用和函数调用有一个重要的区别，即：调用上下文。下面是一个具体的例子：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" calculator"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//对象直接量")]),s._v("\noperand1："),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("，\noperand2："),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("，\n"),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v("（）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//注意this关键字的用法，this指代当前对象")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("result"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("operand1"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("operandz；\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("；\ncalculator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("add（）；"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//这个方法调用计算1+1的结果")]),s._v("\ncalculator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("result "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//=>2")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("  需要注意的是，this 是一个关键字，不是变量，也不是属性名。JavaScript 的语法不允许给 this 赋值。"),a("br"),s._v("\n  和变量不同，关键字 this 没有作用域的限制，嵌套的函数不会从调用它的函数中继承 this。如果嵌套函数作为方法调用，其 this 的值指向调用它的对象。如果嵌套函数作为函数调用，其 this 值不是全局对象（非严格模式下）就是 undefined（严格模式下）。很多人误以为调用嵌套函数时 this 会指向调用外层函数的上下文。如果你想访问这个外部函数的 this 值，需要将 this 的值保存在一个变量里，这个变量和内部函数都同在一个作用域内。通常使用变量 self 来保存 this。")]),s._v(" "),a("h3",{attrs:{id:"构造函数调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造函数调用","aria-hidden":"true"}},[s._v("#")]),s._v(" 构造函数调用")]),s._v(" "),a("p",[s._v("  如果函数或者方法调用之前带有关键宇 new，构造函数调用和普通的函数调用以及方法调用在实参处理、调用上下文和返回值方面都有不同。"),a("br"),s._v("\n  构造函数调用创建一个新的空对象，这个对象继承自构造函数的 prototype 属性。构造函数试图初始化这个新创建的对象，并将这个对象用做其调用上下文，因此构造函数可以使用 this 关键字来引用这个新创建的对象。注意，尽管构造函数看起来像一个方法调用，它依然会使用这个新对象作为调用上下文。也就是说，在表达式 new o.m（）中，调用上下文并不是 o。"),a("br"),s._v("\n  构造函数通常不使用 return 关键宇，它们通常初始化新对象，当构造函数的函数体执行完毕时，它会显式返回。在这种情况下，构造函数调用表达式的计算结果就是这个新对象的值。然而如果构造函数显式地使用 return 语句返回一个对象，那么调用表达式的值就是这个对象。如果构造函数使用 return 语句但没有指定返回值，或者返回一个原始值，那么这时将忽略返回值，同时使用这个新对象作为调用结果。")]),s._v(" "),a("h3",{attrs:{id:"间接调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#间接调用","aria-hidden":"true"}},[s._v("#")]),s._v(" 间接调用")]),s._v(" "),a("p",[s._v("  JavaScript 中的函数也是对象，和其他 JavaScript 对象没什么两样，函数对象也可以包含方法。其中的两个方法 ca11（）和 apply（）可以用来间接地调用函数。两个方法都允许显式指定调用所需的 this 值，也就是说，任何函数可以作为任何对象的方法来调用，哪怕这个函数不是那个对象的方法。两个方法都可以指定调用的实参。ca11（）方法使用它自有的实参列表作为函数的实参，apply（）方法则要求以数组的形式传入参数。")]),s._v(" "),a("h2",{attrs:{id:"函数的实参和形参（掌握）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数的实参和形参（掌握）","aria-hidden":"true"}},[s._v("#")]),s._v(" 函数的实参和形参（掌握）")]),s._v(" "),a("h3",{attrs:{id:"可选形参"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可选形参","aria-hidden":"true"}},[s._v("#")]),s._v(" 可选形参")]),s._v(" "),a("p",[s._v("  当调用函数的时候传入的实参比函数声明时指定的形参个数要少，剩下的形参都将设置为 undefined 值。因此在调用函数时形参是否可选以及是否可以省略应当保持较好的适应性。为了做到这一点，应当给省略的参数赋一个合理的默认值。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("  需要注意的是，当用这种可选实参来实现函数时，需要将可选实参放在实参列表的最后。那些调用你的函数的程序员是没办法省略第一个实参并传入第二个实参的，它必须将 undefined 作为第一个实参显式传入。同样注意在函数定义中使用注释/*optional*/来强调形参是可选的。")]),s._v(" "),a("h3",{attrs:{id:"可变长的实参列表：实参对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可变长的实参列表：实参对象","aria-hidden":"true"}},[s._v("#")]),s._v(" 可变长的实参列表：实参对象")]),s._v(" "),a("p",[s._v("  当调用函数的时候传入的实参个数超过函数定义时的形参个数时，没有办法直接获得未命名值的引用。参数对象解决了这个问题。在函数体内，标识符 arguments 是指向实参对象的引用，实参对象是一个类数组对象，这样可以通过数字下标就能访问传入函数的实参值，而不用非要通过名字来得到实参。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" max（"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*...*/")]),s._v("）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" max"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("Number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("NEGATIVE_INFINITY")]),s._v("；\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//遍历实参，查找并记住最天值")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v("（"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("；i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length；i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("）\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v("（arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("max）max "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("；\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//返回最大值")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" max；\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" largest "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("max（"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("，"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("，"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("，"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("，"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("，"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v("，"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("，"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("，"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),s._v("，"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v("）；"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//=>10000")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("  通过实参名字来修改实参值的话，通过 arguments[]数组也可以获取到更改后的值,在 ECMAScript 5 中移除了实参对象的这个特殊特性。在严格模式下还有一点（和非严格模式下相比的）不同，在非严格模式中，函数里的 arguments 仅仅是一个标识符，在严格模式中，它变成了一个保留字。严格模式中的函数无法使用 arguments 作为形参名或局部变量名，也不能给 arguments 赋值。")]),s._v(" "),a("h3",{attrs:{id:"callee-和-caller-属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#callee-和-caller-属性","aria-hidden":"true"}},[s._v("#")]),s._v(" callee 和 caller 属性")]),s._v(" "),a("p",[s._v("  除了数组元素，实参对象还定义了 callee 和 caller 属性。在 ECMAScript 5 严格模式中，对这两个属性的读写操作都会产生一个类型错误。而在非严格模式下，ECMAScript 标准规范规定 callee 属性指代当前正在执行的函数。caller 是非标准的，但大多数浏览器都实现了这个属性，它指代调用当前正在执行的函数的函数。通过 caller 属性可以访问调用栈。callee 属性在某些时候会非常有用，比如在匿名函数中通过 callee 来递归地调用自身。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("factorial")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("x")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("callee")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h3",{attrs:{id:"将对象属性用做实参"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#将对象属性用做实参","aria-hidden":"true"}},[s._v("#")]),s._v(" 将对象属性用做实参")]),s._v(" "),a("p",[s._v("  当一个函数包含超过三个形参时，对于程序员来说，要记住调用函数中实参的正确顺序实在让人头疼。最好通过名/值对的形式来传入参数，这样参数的顺序就无关紧要了。定义函数的时候，传入的实参都写入一个单独的对象之中，在调用的时候传入一个对象，对象中的名/值对是真正需要的实参数据。")]),s._v(" "),a("h2",{attrs:{id:"作为值的函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作为值的函数","aria-hidden":"true"}},[s._v("#")]),s._v(" 作为值的函数")]),s._v(" "),a("p",[s._v("  在 JavaScript 中，函数不仅是一种语法，也是值，也就是说，可以将函数赋值给变量，存储在对象的属性或数组的元素中，作为参数传人另外一个函数等。")]),s._v(" "),a("h3",{attrs:{id:"自定义函数属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义函数属性","aria-hidden":"true"}},[s._v("#")]),s._v(" 自定义函数属性")]),s._v(" "),a("p",[s._v("  JavaScript 中的函数并不是原始值，而是一种特殊的对象，也就是说，函数可以拥有属性。当函数需要一个“静态”变量来在调用时保持某个值不变，最方便的方式就是给函数定义属性，而不是定义全局变量，显然定义全局变量会让命名空间变得更加杂乱无章。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//计算阶乘，并将结果缓存至函数的属性中")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" factorial（n）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v("（isFinite（n）"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("o "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v("Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("round（n））"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//有限的正整数")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v("（！（n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" factorial））"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//如果没有缓存结果")]),s._v("\n            factorial"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" factorial（n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("）；"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//计算结果并缓存之")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" factorial"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("；"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//返回缓存结果")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("NaN")]),s._v("；"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//如果输入有误")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\nfactorial"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("；"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//初始化缓存以保存这种基本情况")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("h2",{attrs:{id:"作为命名空间的函数-掌握"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作为命名空间的函数-掌握","aria-hidden":"true"}},[s._v("#")]),s._v(" 作为命名空间的函数(掌握)")]),s._v(" "),a("p",[s._v("  比如，假设你写了一段 JavaScript 模块代码，假定这段代码定义了一个用以存储中间计算结果的变量。这样问题就来了，当模块代码放到不同的程序中运行时，你无法得知这个变量是否已经创建了，如果已经存在这个变量，那么将会和代码发生冲突。解决办法当然是将代码放入一个函数内，然后调用这个函数。这样全局变量就变成了函数内的局部变量。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("（"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v("（）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//mymodule（）匿名的函数表达式")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//模块代码")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("（））；"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//结束函数定义并立即调用它")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h2",{attrs:{id:"闭包（掌握）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#闭包（掌握）","aria-hidden":"true"}},[s._v("#")]),s._v(" 闭包（掌握）")]),s._v(" "),a("p",[s._v("  和其他大多数现代编程语言一样，JavaScript 也采用词法作用域（lexical scoping），也就是说，函数的执行依赖于变量作用域，这个作用域是在函数定义时决定的，而不是函数调用时决定的。"),a("br"),s._v("\n  为了实现这种词法作用域，JavaScript 函数对象的内部状态不仅包含函数的代码逻辑，还必须引用当前的作用域链。函数对象可以通过作用域链相互关联起来，函数体内部的变量都可以保存在函数作用域内，这种特性在计算机科学文献中称为“闭包”。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" scope"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"global scope"')]),s._v("；"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//全局变量")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" checkscope（）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" scope"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"local scope"')]),s._v("；"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//局部变量")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" f（）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" scope；"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//在作用域中返回这个值")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" f（）；\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\ncheckscope（）"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('//=>"local scope"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("回想一下词法作用域的基本规则：JavaScript 函数的执行用到了作用域链，这个作用域链是函数定义的时候创建的。嵌套的函数 f（）定义在这个作用域链里，其中的变量 scope 一定是局部变量，不管在何时何地执行函数 f（），这种绑定在执行 f（）时依然有效。因此最后一行代码返回“local scope”，而不是“global scope”。")]),s._v(" "),a("h3",{attrs:{id:"实现闭包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现闭包","aria-hidden":"true"}},[s._v("#")]),s._v(" 实现闭包")]),s._v(" "),a("p",[s._v("  我们将作用域链描述为一个对象列表，不是绑定的栈。每次调用 JavaScript 函数的时候，都会为之创建一个新的对象用来保存局部变量，把这个对象添加至作用域链中。"),a("br"),s._v("\n  当函数返回的时候，就从作用域链中将这个绑定变量的对象删除。如果不存在嵌套的函数，也没有其他引用指向这个绑定对象，它就会被当做垃圾回收掉。"),a("br"),s._v("\n  如果定义了嵌套的函数，每个嵌套的函数都各自对应一个作用域链，并且这个作用域链指向一个变量绑定对象。但如果这些嵌套的函数对象在外部函数中保存下来，那么它们也会和所指向的变量绑定对象一样当做垃圾回收。"),a("br"),s._v("\n  但是如果这个函数定义了嵌套的函数，并将它作为返回值返回或者存储在某处的属性里，这时就会有一个外部引用指向这个嵌套的函数。它就不会被当做垃圾回收，并且它所指向的变量绑定对象也不会被当做垃圾回收。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" uniqueInteger"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("（"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v("（）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//定义函数并立即调用")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" counter"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("；"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//函数的私有状态")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v("（）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" counter"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("；"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("；\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("（））；\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" counter（）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("；\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v("（）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("；"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("，\n        "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("reset")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v("（）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("o；"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("；\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" c"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("counter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("d"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("counter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("；"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//创建两个计数器")]),s._v("\nd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("count（）"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//l=>0：它们互不干扰")]),s._v("\nc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("reset（）"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//reset（）和count（）方法共享状态")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("C")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("count（）"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//=>0：因为我们重置了c")]),s._v("\nd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("count（）"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//=>1：而没有重置d")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("  每次调用 counter（）都会创建一个新的作用域链和一个新的私有变量。因此，如果调用 counter（）两次，则会得到两个计数器对象，而且彼此包含不同的私有变量，调用其中一个计数器对象的 count（）或 reset（）不会影响到另外一个对象。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" counter（n）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//函数参数n是一个私有变量")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//属性getter方法返回并给私有计数器var递增1")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("get")]),s._v(" count（）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("；"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("，\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//属性setter不允许n递减")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" count（m）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v("（m"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v("n）n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("m；\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throw")]),s._v(" Error（"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"count can only be set to a larger value"')]),s._v("）；\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("；\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" c"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("counter（"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v("）；\nc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("count"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//=>1000")]),s._v("\nc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("count"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//=>1001")]),s._v("\nc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("count"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2000")]),s._v("\nc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("count"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//=>2000")]),s._v("\nc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("count"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2000")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//=>Error！")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[s._v("  需要注意的是，这个版本的 counter（）函数并未声明局部变量，而只是使用参数 n 来保存私有状态，属性存取器方法可以访问 n。这样的话，调用 counter（）的函数就可以指定私有变量的初始值了。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//这个函数返回一个总是返回v的函数\nfunction constfunc（v）{return function（）{return v；}；}\n//创建一个数组用来存储常数函数\nvar funcs=[]；\nfor（var i=o；i<10；i++）funcs[i]=constfunc（i）；\n//在第5个位置的元素所表示的函数返回值为5\nfuncs[5]（）//=>5\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("  这段代码利用循环创建了很多个闭包，当写类似这种代码的时候往往会犯一个错误：那就是试图将循环代码移入定义这个闭包的函数之内，看一下这段代码：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//返回一个函数组成的数组，它们的返回值是0～9\nfunction constfuncs（）{\n    var funcs=[]；\n    for（vari=0；i<10；i++）\n        funcs[i]=function（）{ return i；}；\n    return funcs；\n}\nvar funcs=constfuncs（）；\nfuncs[5]（）//返回值是10\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("  书写闭包的时候还需注意一件事情，this 是 JavaScript 的关键字，而不是变量。正如之前讨论的，每个函数调用都包含一个 this 值，如果闭包在外部函数里是无法访问 this 的，除非外部函数将 this 转存为一个变量：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" self"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),s._v("；"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//将this保存至一个变量中，以便嵌套的函数能够访问它")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h2",{attrs:{id:"函数属性、方法和构造函数（掌握）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数属性、方法和构造函数（掌握）","aria-hidden":"true"}},[s._v("#")]),s._v(" 函数属性、方法和构造函数（掌握）")]),s._v(" "),a("h3",{attrs:{id:"length-属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#length-属性","aria-hidden":"true"}},[s._v("#")]),s._v(" length 属性")]),s._v(" "),a("p",[s._v("  在函数体里，arguments.length 表示传入函数的实参的个数。而函数本身的 1ength 属性则有着不同含义。函数的 1ength 属性是只读属性，它代表函数实参的数量，这里的参数指的是“形参”而非“实参”，也就是在函数定义时给出的实参个数，通常也是在函数调用时期望传入函数的实参个数。")]),s._v(" "),a("h3",{attrs:{id:"prototype-属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prototype-属性","aria-hidden":"true"}},[s._v("#")]),s._v(" prototype 属性")]),s._v(" "),a("p",[s._v("  每一个函数都包含一个 prototype 属性，这个属性是指向一个对象的引用，这个对象称做“原型对象”（prototype object）。每一个函数都包含不同的原型对象。当将函数用做构造函数的时候，新创建的对象会从原型对象上继承属性。")]),s._v(" "),a("h3",{attrs:{id:"call（）方法和-apply（）方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#call（）方法和-apply（）方法","aria-hidden":"true"}},[s._v("#")]),s._v(" call（）方法和 apply（）方法")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("classof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("o")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("o "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Null'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("o "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Undefined'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("tostring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("o"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("slice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("  在 ECMAScript5 的严格模式中，ca11（）和 apply（）的第一个实参都会变为 this 的值，哪怕传入的实参是原始值甚至是 null 或 undefined。在 ECMAScript3 和非严格模式中，传入的 null 和 undefined 都会被全局对象代替，而其他原始值则会被相应的包装对象（wrapper object）所替代。apply（）方法和 cal1（）类似，但传入实参的形式和 cal1（）有所不同，它的实参都放入一个数组当中：需要注意的是，传入 apply（）的参数数组可以是类数组对象也可以是真实数组。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("apply")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("o"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"bind（）方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bind（）方法","aria-hidden":"true"}},[s._v("#")]),s._v(" bind（）方法")]),s._v(" "),a("p",[s._v("  bind（）是在 ECMAScript5 中新增的方法，但在 ECMAScript3 中可以轻易模拟 bind（）。从名字就可以看出，这个方法的主要作用就是将函数绑定至某个对象。当在函数 f（）上调用 bind（）方法并传入一个对象 0 作为参数，这个方法将返回一个新的函数。（以函数调用的方式）调用新的函数将会把原始的函数 f（）当做。的方法来调用。传入新函数的任何实参都将传入原始函数，比如：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" f（y）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("y；"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//这个是待绑定的函数")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" o"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("x："),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("；"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("将要绑定的对象\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" g"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("bind（o）；"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//通过调用g（x）来调用o.f（x）")]),s._v("\ng（"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("）"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//=>3")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("  ECMAScript 5 中的 bind（）方法不仅仅是将函数绑定至一个对象，它还附带一些其他应用：除了第一个实参之外，传入 bind（）的实参也会绑定至 this，这个附带的应用是一种常见的函数式编程技术，有时也被称为“柯里化”（currying）。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("sum")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v("（x，y）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("；"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//返回两个实参的和值")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//创建一个类似sum的新函数，但this的值绑定到nu11")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//并且第一个参数绑定到1，这个新的函数期望只传入一个实参")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" succ"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("sum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("bind（"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v("，"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("）；\nsucc（"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("）"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//=>3：x绑定到1，并传入2作为实参y")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" f（y，z）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("y"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("；"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//另外一个做累加计算的函数")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" g"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("bind（"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("x："),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("，"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("）；"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//绑定this和y")]),s._v("\ng（"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("）"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//=>6：this.x绑定到1，y绑定到2，z绑定到3")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("  ECMAScript3 版本的 Function.bind（）方法")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v("（"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("bind）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("bind")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v("（o"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*，args*/")]),s._v("）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//将this和arguments的值保存至变量中")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//以便在后面嵌套的函数中可以使用它们")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" self"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),s._v("，boundArgs"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("arguments；\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//bind（）方法的返回值是一个函数")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v("（）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//创建一个实参列表，将传入bind（）的第二个及后续的实参都传入这个函数")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" args"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("，i；\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v("（i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("；i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" boundArgs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length；i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("）args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("push（boundArgs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("）；\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v("（i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("o；i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length；i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("）args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("push（arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("）；\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//现在将self作为o的方法来调用，传入这些实参")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("apply（o，args）；\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("；\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("；\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("；\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("p",[s._v("  ECMAScript5 定义的 bind（）方法也有一些特性是上述 ECMAScript3 代码无法模拟的。首先，真正的 bind（）方法返回一个函数对象，这个函数对象的 length 属性是绑定函数的形参个数减去绑定实参的个数（1ength 的值不能小于零）。"),a("br"),s._v("\n  再者，ECMAScript5 的 bind（）方法可以顺带用做构造函数。如果 bind（）返回的函数用做构造函数，将忽略传入 bind（）的 this，原始函数就会以构造函数的形式调用，其实参也已经绑定。"),a("br"),s._v("\n  由 bind（）方法所返回的函数并不包含 prototype 属性（普通函数固有的 prot otype 属性是不能删除的），并且将这些绑定的函数用做构造函数时所创建的对象从原始的未绑定的构造函数中继承 prototype。同样，在使用 instanceof 运算符时，绑定构造函数和未绑定构造函数并无两样。")]),s._v(" "),a("h3",{attrs:{id:"tostring（）方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tostring（）方法","aria-hidden":"true"}},[s._v("#")]),s._v(" toString（）方法")]),s._v(" "),a("p",[s._v("  和所有的 JavaScript 对象一样，函数也有 toString（）方法，ECMAScript 规范规定这个方法返回一个字符串，这个字符串和函数声明语句的语法相关。实际上，大多数（非全部）的 toString（）方法的实现都返回函数的完整源码。内置函数往往返回一个类似\n“[native code]”的字符串作为函数体。")]),s._v(" "),a("h3",{attrs:{id:"function（）构造函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function（）构造函数","aria-hidden":"true"}},[s._v("#")]),s._v(" Function（）构造函数")]),s._v(" "),a("p",[s._v("  不管是通过函数定义语句还是函数直接量表达式，函数的定义都要使用 function 关字。但函数还可以通过 Function（）构造函数来定义，比如：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" f "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'x'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'y'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'return x*y;'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("  Function（）构造函数可以传入任意数量的字符串实参，最后一个实参所表示的文本就是函数体；它可以包含任意的 JavaScript 语句，每两条语句之间用分号分隔。传入构造函数的其他所有的实参字符串是指定函数的形参名字的字符串。如果定义的函数不包含任何参数，只须给构造函数简单地传入一个字符串——函数体即可。"),a("br"),s._v("\n  关于 Function（）构造函数有几点需要特别注意：")]),s._v(" "),a("ul",[a("li",[s._v("Function（）构造函数允许 JavaScript 在运行时动态地创建并编译函数。")]),s._v(" "),a("li",[s._v("每次调用 Function（）构造函数都会解析函数体，并创建新的函数对象。如果是在一个循环或者多次调用的函数中执行这个构造函数，执行效率会受影响。相比之下，循环中的嵌套函数和函数定义表达式则不会每次执行时都重新编译。")]),s._v(" "),a("li",[s._v("最后一点，也是关于 Function（）构造函数非常重要的一点，就是它所创建的函数并不是使用词法作用域，相反，函数体代码的编译总是会在顶层函数执行，正如下面代码所示：")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" scope"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"global"')]),s._v("；"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" constructFunction（）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" scope"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"local"')]),s._v("；\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Function")]),s._v("（"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"return scope"')]),s._v("）；"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//无法捕获局部作用域")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//这一行代码返回global，因为通过Function（）构造函数")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//所返回的函数使用的不是局部作用域")]),s._v("\nconstructFunction（）（）；"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('//=>"global"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("  Function（）构造函数在实际编程过程中很少会用到。")]),s._v(" "),a("h2",{attrs:{id:"函数式编程-掌握"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数式编程-掌握","aria-hidden":"true"}},[s._v("#")]),s._v(" 函数式编程(掌握)")]),s._v(" "),a("h3",{attrs:{id:"使用函数处理数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用函数处理数组","aria-hidden":"true"}},[s._v("#")]),s._v(" 使用函数处理数组")]),s._v(" "),a("p",[s._v("  自定义 map（）和 reduce（）函数")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//对于每个数组元素调用函数f（），并返回一个结果数组")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//如果Array.prototype.map定义了的话，就使用这个方法")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" map"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("map\n？"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v("（a，f）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("map（f）；"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//如果已经存在map（）方法，就直接使用它")]),s._v("\n："),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v("（a，f）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//否则，自己实现一个")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" results"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("；\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v("（"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("，len"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length；i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" len；i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v("（i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" a）results"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("call（"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v("，a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("，i，a）；\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" results；\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("；\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//使用函数f（）和可选的初始值将数组a减至一个值")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//如果Array.prototype.reduce存在的话，就使用这个方法")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" reduce"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("reduce\n    ？"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v("（a，f，initial）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//如果reduce（）方法存在的话")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v("（arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("ength"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("）\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("reduce（f，initial）；"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//如果传人了一个初始值")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("reduce（f）；"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//否则没有初始值")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    ："),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v("（a，f，initial）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//这个算法来自ES5规范")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("，len"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length，accumulator；\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//以特定的初始值开始，否则第一个值取自a")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v("（arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("ength"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("）accumulator"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("initial；\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//找到数组中第一个已定义的索引")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v("（len"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v("o）"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throw")]),s._v(" TypeError（）；\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v("（i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("len）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v("（i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" a）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                accumulator "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("；\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),s._v("；\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("；\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v("（i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("en）"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throw")]),s._v(" TypeError（）；\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//对于数组中剩下的元素依次调用f（）")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v("（i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("en）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v("（i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" a）\n            accumulator"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("call（"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),s._v("，accumulator，a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("，i，a）；\n        i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("；\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" accumulator；\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("；\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br")])]),a("h3",{attrs:{id:"高阶函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高阶函数","aria-hidden":"true"}},[s._v("#")]),s._v(" 高阶函数")]),s._v(" "),a("p",[s._v("  所谓高阶函数（higher-order function）就是操作函数的函数，它接收一个或多个函数作为参数，并返回一个新函数，这里是一个更常见的例子，它接收两个函数 f（）和 g（），并返回一个新的函数用以计算 f（g（））：：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//返回一个新的可以计算f（g（...））的函数")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//返回的函数h（）将它所有的实参传入g（），然后将g（）的返回值传入f（）")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//调用f（）和g（）时的this值和调用h（）时的this值是同一个this")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" compose（f，g）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v("（）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//需要给f（）传人一个参数，所以使用f（）的cal1（）方法")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//需要给g（）传入很多参数，所以使用g（）的apply（）方法")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("call（"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),s._v("，g"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("apply（"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),s._v("，arguments））；\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("；\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("square")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v("（x）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("x；"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("；\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("sum")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v("（x，y）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("y；"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("；\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" squareofsum"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("compose（square，sum）；\nsquareofsum（"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("，"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("）"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//=>25")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//这个高阶函数返回一个新的函数，这个新函数将它的实参传入f（）")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//并返回f的返回值的逻辑非")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" not（f）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v("（）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("返回一个新的函数\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" result"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("apply（"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),s._v("，arguments）；"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//调用f（）")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" ！result；"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//对结果求反")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("；\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("even")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v("（x）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//判断a是否为偶数的函数")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("；\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("；\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" odd "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("not（even）；"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//一个新函数，所做的事情和even（）相反")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("，"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("，"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("，"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("，"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("every（odd）；"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//=>true：每个元素都是奇数")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("h3",{attrs:{id:"不完全函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不完全函数","aria-hidden":"true"}},[s._v("#")]),s._v(" 不完全函数")]),s._v(" "),a("p",[s._v("  作者在本节讨论的是一种函数变换技巧，即把一次完整的函数调用拆成多次函数调用，每次传入的实参都是完整实参的一部分，每个拆分开的函数叫做不完全函数（partial function），每次函数调用叫做不完全调用（partial application），这种函数变换的特点是每次调用都返回一个函数，直到得到最终运行结果为止，举一个简单的例子，将对函数 f（1，2，3，4，5，6）的调用修改为等价的 f（1，2）（3，4）（5，6），后者包含三次调用，和每次调用相关的函数就是“不完全函数”。")]),s._v(" "),a("h3",{attrs:{id:"记忆"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#记忆","aria-hidden":"true"}},[s._v("#")]),s._v(" 记忆")]),s._v(" "),a("p",[s._v("  定义了一个阶乘函数，它可以将上次的计算结果缓存起来。在函数式编程当中，这种缓存技巧叫做“记忆”（memorization）。下面的代码展示了一个高阶函数，memorize（）接收一个函数作为实参，并返回带有记忆能力的函数。"),a("br"),s._v("\n  需要注意的是，记忆只是一种编程技巧，本质上是牺牲算法的空间复杂度以换取更优的时间复杂度，在客户端 JavaScript 中代码的执行时间复杂度往往成为瓶颈，因此在大多数场景下，这种牺牲空间换取时间的做法以提升程序执行效率的做法是非常可取的。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//返回f（）的带有记忆功能的版本")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//只有当f（）的实参的字符串表示都不相同时它才会工作")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" memorize（f）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" cache"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("；"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//将值保存在闭包内")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v("（）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//将实参转换为字符串形式，并将其用做缓存的键")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" key"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("join"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("call（arguments，"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"，"')]),s._v("）；\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v("（key "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" cache） "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" cache"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("；\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" cache"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("apply（"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),s._v("，arguments）；\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("；\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("  memorize（）函数创建一个新的对象，这个对象被当做缓存（的宿主）并赋值给一个局部变量，因此对于返回的函数来说它是私有的（在闭包中）。所返回的函数将它的实参数组转换成字符串，并将字符串用做缓存对象的属性名。如果在缓存中存在这个值，则直接返回它。"),a("br"),s._v("\n  否则，就调用既定的函数对实参进行计算，将计算结果缓存起来并返回，下面的代码展示了如何使用 memorize（）：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//返回两个整数的最大公约数")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//使用欧几里德算法：http://en.wikipedia.org/wiki/Euclidean_algorithm")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" gcd（a，b）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//这里省略对ab的类型检查")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" t；"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//临时变量用来存储交换数值")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v("（a"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("b）t"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("b，b"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("a，a"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("t；"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//确保a>=b")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v("（bl"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("）t"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("b，b"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("ab，a"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("t；"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//这是求最大公约数的欧几里德算法")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" a；\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" gcdmemo"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("memorize（gcd）；\ngcdmemo（"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("85")]),s._v("，"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("187")]),s._v("）"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//=>17")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//注意，当我们写一个递归函数时，往往需要实现记忆功能")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//我们更希望调用实现了记忆功能的递归函数，而不是原递归函数")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" factorial"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("memorize（"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v("（n）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v("（n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("）？"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("：n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("factorial（n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("）；\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("）；\nfactorial（"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("）"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//=>120.对于4~1的值也有缓存")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])])])},[],!1,null,null,null);t.default=r.exports}}]);